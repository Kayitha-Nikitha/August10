===================  OPERATORS ========================

Evaluate the expression in a step by step way based on operator precedence and associativity

1) printf("%d\n",1==5==5);
Output: 0
1==5==5
0==5
0

2) int i =0;
   printf("%d %d",i,i++);
Output: 1 0
Sequence of printing variable expressions is from left to right 
but the sequence of evaluation of variable expressions is from right to left

3) int x=5;
   printf("%d %d %d\n",x++,x++,x++);
Output: 7 6 5
Sequence of printing variable expressions is from left to right 
but the sequence of evaluation of variable expressions is from right to left

4) int x=2;
   printf("%d   ",++x);
   printf("%d\n",x++);
Output: 3 3
++x=3//pre incrementation- incrementation and assignment
x++=3//post incrementation- assignment and incrementation

5) int k=1;
   printf("%d==1 is ""%s\n",k,k==1?"TRUE":"FALSE");
Output: 1==1 is TRUE
Since k=1, 1==1 is true, so first statement "TRUE" gets printed

6) int i=5;
   i=i++ - --i + ++i;
Output: 6
i=5 - 5 + 6 = 6

7) int a=7;
   a+=a+=a-=6;
   printf("%d\n",a);
Output: 4
a+=a+=a=a-6
a+=a+=a=7-6
a+=a+=1
a+=a=a+1
a+=a=1+1
a+=2
a=a+2
a=2+2
a=4

8) int x=10,y=5,p,q;
   p=x>9;
   q=p||(x=5,y=10);
   printf("%d %d %d\n",q,x,y);
Output: 1 10 5
p=x>9
p=1
q=1||something- compiler doesn't get to second part, so no reassigning of variables x and y
So, q=1, x=10, y=5

9) int x=2,y=1;
   y+=x<<=2;
   printf("%d %d\n",x,y);
Output: 8 9
y+=8	//x=8, on left shift
y=y+8
y=1+8
y=9

10) int x=2,y=4,z;
    z=y++*x++|y--;
    printf("%d\n",z);
Output: 13
z=y++*x++|y--
z=4*2|5
z=8|5
z=13

11) int a=5,b=6,c=7,d;
    d=a&=b&=c&&a;
    printf("%d\n",d);
Output: 0
d=a&=b&=c&&a
d=a&=b&=1
d=a&=6&1
d=a&=0
d=0

12) int i=10;
    i=(10<10)?(10>=10)?(10<=10)?1:2:3:4;
    printf("%d\n",i);
Output: 4


13) int a=10,b=20;
    a=(a>5||b=6?40:50);
    printf("%d\n",a);
Output: Error- assignment is not possible

14) printf("%x\n",-1>>4);
    printf("%x\n",-1<<4);
Output: 
ffffffff
fffffff0


15) int x=7;
    x=(x<<=x%2);
    printf("%d\n",x);
Output: 14
x=(x<<=x%2)
x=(x<<=7%2)
x=(x<<1)
x=(7<<1)
x=14

16) int a=2,b=5,c=1;
    printf("%d\n",(b>=a>=c?1:0));
Output: 1
(b>=a>=c?1:0))
b>=a>=c
b>=a, a>=c => true
So, output is 1

17) int a=5;
    a=a-~a +1;
    printf("%d\n",a);
Output: 12
a=a-~a +1
a=a-(-5) +1
a=a+5+1
a=a+6
a=6+6
a=12

18) a=b=c=1;
    x=--a||++b*(3-1)/2&&b*(--c/3);
    printf("%d\n",x);
Output: 0
x=--a||++b*(3-1)/2&&b*(--c/3)
x=--a||2*(3-1)/2&&b*0
x=--a||2*2/2&&b*0
x=--a||2*2/2&&b*0
x=--a||2&&0
x=--a||0
x=0||0
x=0

19) a=10
    b = -5
    c = 2.5
    printf("%d %d",sizeof(a) + sizeof((++b) *c, b);
Output: 
Error- a, b, c are undeclared

20) int i=5;
    i=i++ - i
    printf("%d",i)
Output: -1
i=i++ - i
i=5 - i
i=5 - 6
i= -1

========================================= PREPROCESSORS AND MACROS ===========================

1) What will be the output of the C program?
#include<stdio.h>
#define CONDITION(i)\
printf("preprocessor works\n");                         
int main()
{
	CONDITION(0);
	return 0;
}
Output: preprocessor works
Reason: Expansion of macro 'CONDITION'
(backslash- multiple lines)

2) What will be the output of the C program?
#include<stdio.h>
# define loop while(1)
int main()
{
	loop;  
	printf("preprocessor-aptitude");
	return 0;
}
Output: Infinite execution, so no output

3) What will be the output of the C program?
#include<stdio.h>
# define x --5
int main()
{
	printf("%d",x);
	return 0;
}
Output: Compilation error, cannot increment or decrement
 the value at macro level

4) What will be the output of the C program ?
#include<stdio.h>
#define sqr(x) ++x * ++x
int main()
{
	int a = 3, z;
	z = ++a * ++a;     
	a -= 3;
	printf("%d %d", sqr(a), z);
	return 0;
}
Output: 16 25
z = ++a * ++a;
z = 5*5=>25     

a -= 3=> a= a-3
	a=2
sqr(2)= 4* 4= 16

5) What will be the output of the C program?
#include<stdio.h>                      
#define x 1+2
int main()
{
	int i;
	i = x * x * x;
	printf("%d",i);
}
Output: 7
i = x*x*x
i = 1+2*x*x
i = 3*x*x
i = 3*1+2*x(Precedence)
i = 3+2*x
i = 5*x
i = 5*1+2
i = 5+2
i = 7

6) What will be the output of the C program?
#include<stdio.h>
#define a =
int main()
{
	int num a 6;
	printf("%d",num);
	return 0;
}
Output: 6
Reason: a is defined as 'a =', so 'a =' is not necessary in the main function

7) What will be the output of the C program?
#include<stdio.h>
#define fun(x,y) x*y
int main()
{
	int x = 2, y = 1;
	printf("%d",fun(x + 2, y - 1));
	return 0;
}
Output: 3
Reason:
fun(2 + 2, 1 - 1) -> 2 + 2 * 1 - 1
	             2 + 2 - 1
	             4 - 1
	             3

8) What will be the output of the C program?
#include<stdio.h>
int main()
{
	char DATE[15] = "Current Date";
	printf("%s\n", __DATE__ );
	return 0;
}
Output: Aug 10 2021
Reason: __DATE__ is a C macro to print current date in 
	MMM DD YYYY format

9) What will be the output of the C program?
#include<stdio.h>
int main()
{
	char TIME[15] = "Current Time";
	printf("%s\n",__TIME__);
	return 0;
}
Output: Time in HH:MM:SS format

10) What will be the output of the C program?
#include<stdio.h>
int main()
{	
	printf("Line :%d\n", __LINE__ );
	return 0;
}
Output:4
Reason: Line count from start to the statement with __LINE__

11) What will be the output of the C program?
#include<stdio.h>
#define  preprocessor_works(x, y)  \
	printf(#x " and " #y " are great!\n")
int main(void) {
	preprocessor_works(you, me);
	return 0;
}
Output: you and me are great!
Reason: # macro converts a macro parameter into a string constant

12) What will be the output of the C program?
#include<stdio.h>
# define puts  "%s C preprocessor"
int main()
{
	printf(puts, puts);
	return 0;
}
Output: %s C preprocessor C preprocessor
Reason: printf(puts,puts); will call the preprocessor macro # define puts.

13) What will be the output of the C program?
#include<stdio.h>
#define preprocessor(n) printf ("macro" #n " = %d", macro##n)
int main(void) {
	int macro25 = 47;
	preprocessor(25);
	return 0;
}
Output: macro25 = 47
Reason: ## is concatenation operator

14) What will be the output of the C program?
#include<stdio.h>
#include<string.h>
#define MACRO(num) ++num 
int main()
{
	char *ptr = "preprocessor";
	int num =strlen(ptr);
	printf("%s  ", MACRO(ptr));
	printf("%d", MACRO(num));
	return 0;
}
Output: reprocessor 13

15) What will be the output of the C program?
#include<stdio.h>
#define i 10
int main()
{
	#define i 20
	printf("%d",i);
	return 0;
}
Output: 20
Reason: i redefined in the main function, so over written

16) What will be the output of the C program?
#include<stdio.h>
#define clrscr() 50
int main()
{
	clrscr();
	printf("%d\n",clrscr());
	return 0;
}
Output: 50

17) What will be the output of the C program?
#include<stdio.h>
#define int char
main()
{
	int i=5;
	printf ("sizeof (i) =%d", sizeof (i));
}
Output: sizeof (i) =1
Reason: #define replaces int by char macro

18) Write programs to understand the usage of below preprocessor directives.
#include, #if, #ifdef, #ifndef, #else, #elif, #endif, #define, #undef, #line, #error, and #pragma

===================================== TYPEDEF =========================================

1) In the following code, the P2 is Integer Pointer or Integer?
typedef int *ptr;
ptr p1, p2;
Answer: P2 is integer pointer.
Here ptr is declared as a pointer variable. Using that we could assign two pointers, 
where as first one holds the address of Ptr variable and the second one points the address of the first variable. 

2)  In the following code what is 'P'?
typedef char *charp;
const charp P;
Answer: P is a constant

3) What is x in the following program?
#include<stdio.h>
int main()
{
    typedef char (*(*arrfptr[3])())[10];
    arrfptr x;
    return 0;
}
Answer: x is an array of three function pointers

4) What is apfArithmatics in the below statement?
typedef int (*apfArithmatics[3])(int,int); 

5) What is pf in the below statement?
typedef int (*pf)(int);
Answer: pf is a pointer of type function,
pf could point to any function that would return value of int and would accept 1 argument of type int

6) What do the following declarations mean?
typedef char *pc;		// pointer to char
typedef pc fpc();		//function returning pointer to char
typedef fpc *pfpc;		//pointer to the above
typedef pfpc fpfpc();		//function returning pointer to above
typedef fpfpc *pfpfpc;	//pointer to function returning pointer to above
pfpfpc a[N];		//array of pointer to function returning pointer to above

7) Write few programs using typedef on structures and enums.